diff -Npur ssreflect-1.5.coq85beta2/src/ssreflect.ml4 ssreflect-1.5.coq85beta3/src/ssreflect.ml4
--- ssreflect-1.5.coq85beta2/src/ssreflect.ml4	2015-04-20 13:39:21.000000000 +0200
+++ ssreflect-1.5.coq85beta3/src/ssreflect.ml4	2015-12-02 16:17:41.987795317 +0100
@@ -258,7 +258,7 @@ let mkRLambda n s t = GLambda (dummy_loc
 (** Constructors for constr *)
 let pf_e_type_of gl t =
   let sigma, env, it = project gl, pf_env gl, sig_it gl in
-  let sigma, ty = Typing.e_type_of env sigma t in
+  let sigma, ty = Typing.type_of env sigma t in
   re_sig it sigma, ty
 
 let mkAppRed f c = match kind_of_term f with
@@ -2082,7 +2082,7 @@ let abs_wgen keep_let ist f gen (gl,args
        with NoMatch -> redex_of_pattern env cp, c in
      evar_closed t p;
      let ut = red_product_skip_id env sigma t in
-     pf_merge_uc ucst gl, args, mkLetIn(Name (f x), ut, pf_type_of gl t, c)
+     pf_merge_uc ucst gl, args, mkLetIn(Name (f x), ut, pf_unsafe_type_of gl t, c)
   | _, Some ((x, _), Some p) ->
      let x = hoi_id x in
      let cp = interp_cpattern ist gl p None in
@@ -2090,7 +2090,7 @@ let abs_wgen keep_let ist f gen (gl,args
        try fill_occ_pattern ~raise_NoMatch:true env sigma c cp None 1
        with NoMatch -> redex_of_pattern env cp, c in
      evar_closed t p;
-     pf_merge_uc ucst gl, t :: args, mkProd(Name (f x), pf_type_of gl t, c)
+     pf_merge_uc ucst gl, t :: args, mkProd(Name (f x), pf_unsafe_type_of gl t, c)
   | _ -> gl, args, c
 
 let clr_of_wgen gen clrs = match gen with
@@ -2250,7 +2250,7 @@ ARGUMENT EXTEND ssrocc TYPED AS (bool *
 END
 
 let pf_mkprod gl c ?(name=constr_name c) cl =
-  let t = pf_type_of gl c in
+  let t = pf_unsafe_type_of gl c in
   if name <> Anonymous || noccurn 1 cl then mkProd (name, t, cl) else
   mkProd (Name (pf_type_id gl t), t, cl)
 
@@ -2768,11 +2768,11 @@ let injectl2rtac c = match kind_of_term
   tclTHENLIST [havetac id c; injectidl2rtac id (mkVar id, NoBindings); clear [id]]
 
 let is_injection_case c gl =
-  let (mind,_), _ = pf_reduce_to_quantified_ind gl (pf_type_of gl c) in
+  let (mind,_), _ = pf_reduce_to_quantified_ind gl (pf_unsafe_type_of gl c) in
   eq_gr (IndRef mind) (build_coq_eq ())
 
 let perform_injection c gl =
-  let mind, t = pf_reduce_to_quantified_ind gl (pf_type_of gl c) in
+  let mind, t = pf_reduce_to_quantified_ind gl (pf_unsafe_type_of gl c) in
   let dc, eqt = decompose_prod t in
   if dc = [] then injectl2rtac c gl else
   if not (closed0 eqt) then
@@ -2876,7 +2876,7 @@ let ssrmkabs id gl =
       Evarutil.new_evar (Environ.push_rel rd env) sigma concl in
     pp(lazy(pr_constr concl));
     let term = mkApp (mkLambda(Name id,abstract_ty,kont) ,[|abstract_proof|]) in
-    let sigma, _ = Typing.e_type_of env sigma term in
+    let sigma, _ = Typing.type_of env sigma term in
     sigma, term in
   Proofview.V82.of_tactic
     (Proofview.tclTHEN
@@ -3424,7 +3424,7 @@ let pf_interp_gen_aux ist gl to_ind ((oc
     let nv, p, _, ucst' = pf_abs_evars gl (fst pat, c) in
     let ucst = Evd.union_evar_universe_context ucst ucst' in
     if nv = 0 then anomaly "occur_existential but no evars" else
-    false, pat, mkProd (constr_name c, pf_type_of gl p, pf_concl gl), p, clr,ucst
+    false, pat, mkProd (constr_name c, pf_unsafe_type_of gl p, pf_concl gl), p, clr,ucst
   else loc_error (loc_of_cpattern t) "generalized term didn't match"
 
 let genclrtac cl cs clr =
@@ -3613,7 +3613,7 @@ let pushcaseeqtac cl gl =
   let dc, cl2 = decompose_lam_n n cl1 in
   let _, t = List.nth dc (n - 1) in
   let cl3, eqc, gl = mkEq R2L cl2 args.(0) t n gl in
-  let prot, gl = mkProt (pf_type_of gl cl) cl3 gl in
+  let prot, gl = mkProt (pf_unsafe_type_of gl cl) cl3 gl in
   let cl4 = mkApp (compose_lam dc prot, args) in
   let gl, _ = pf_e_type_of gl cl4 in
   tclTHEN (apply_type cl4 [eqc])
@@ -3922,7 +3922,7 @@ let ssrelim ?(is_case=false) ?ist deps w
       let elimty = Reductionops.whd_betadeltaiota env (project gl) elimty in
       None, elim, elimty, elim_args, n_elim_args, elim_is_dep, is_rec, pred, gl
     | None ->
-      let c = Option.get oc in let c_ty = pf_type_of gl c in
+      let c = Option.get oc in let c_ty = pf_unsafe_type_of gl c in
       let ((kn, i) as ind, _ as indu), unfolded_c_ty =
         pf_reduce_to_quantified_ind gl c_ty in
       let sort = elimination_sort_of_goal gl in
@@ -3933,7 +3933,7 @@ let ssrelim ?(is_case=false) ?ist deps w
         else
           pf_eapply (fun env sigma ->
             Indrec.build_case_analysis_scheme env sigma indu true) gl sort in
-      let elimty = pf_type_of gl elim in
+      let elimty = pf_unsafe_type_of gl elim in
       let pred_id,n_elim_args,is_rec,elim_is_dep,n_pred_args =
         analyze_eliminator elimty env (project gl) in
       let rctx = fst (decompose_prod_assum unfolded_c_ty) in
@@ -3966,7 +3966,7 @@ let ssrelim ?(is_case=false) ?ist deps w
     let res = 
       if elim_is_dep then None else
       let arg = List.assoc (n_elim_args - 1) elim_args in
-      let arg_ty = pf_type_of gl arg in
+      let arg_ty = pf_unsafe_type_of gl arg in
       match saturate_until gl c c_ty (fun c c_ty gl ->
         pf_unify_HO (pf_unify_HO gl c_ty arg_ty) arg c) with
       | Some (c, _, _, gl) -> Some (false, gl)
@@ -3975,7 +3975,7 @@ let ssrelim ?(is_case=false) ?ist deps w
     | Some x -> x
     | None ->
       let inf_arg = List.hd inf_deps_r in
-      let inf_arg_ty = pf_type_of gl inf_arg in
+      let inf_arg_ty = pf_unsafe_type_of gl inf_arg in
       match saturate_until gl c c_ty (fun _ c_ty gl ->
               pf_unify_HO gl c_ty inf_arg_ty) with
       | Some (c, _, _,gl) -> true, gl
@@ -3984,7 +3984,7 @@ let ssrelim ?(is_case=false) ?ist deps w
       spc()++pr_constr c++spc()++str"or to unify it's type with"++
       pr_constr inf_arg_ty) in
   pp(lazy(str"elim_is_dep= " ++ bool elim_is_dep));
-  let predty = pf_type_of gl pred in
+  let predty = pf_unsafe_type_of gl pred in
   (* Patterns for the inductive types indexes to be bound in pred are computed
    * looking at the ones provided by the user and the inferred ones looking at
    * the type of the elimination principle *)
@@ -4061,7 +4061,7 @@ let ssrelim ?(is_case=false) ?ist deps w
     | Some (IpatId _) when not is_rec -> 
         let k = List.length deps in
         let c = fire_subst gl (List.assoc (n_elim_args - k - 1) elim_args) in
-        let t = pf_type_of gl c in
+        let t = pf_unsafe_type_of gl c in
         let gen_eq_tac, gl =
           let refl = mkApp (eq, [|t; c; c|]) in
           let new_concl = mkArrow refl (lift 1 (pf_concl orig_gl)) in 
@@ -4079,7 +4079,7 @@ let ssrelim ?(is_case=false) ?ist deps w
     let concl = List.fold_left mk_lam concl pred_rctx in
     let gl, concl = 
       if eqid <> None && is_rec then
-        let concl, gl = mkProt (pf_type_of gl concl) concl gl in
+        let concl, gl = mkProt (pf_unsafe_type_of gl concl) concl gl in
         let gl, _ = pf_e_type_of gl concl in
         gl, concl
       else gl, concl in
@@ -4146,7 +4146,7 @@ let ssrelim ?(is_case=false) ?ist deps w
           let case = args.(Array.length args-1) in
           if not(closed0 case) then tclTHEN (introstac [IpatAnon]) gen_eq_tac gl
           else
-          let case_ty = pf_type_of gl case in 
+          let case_ty = pf_unsafe_type_of gl case in
           let refl = mkApp (eq, [|lift 1 case_ty; mkRel 1; lift 1 case|]) in
           let new_concl = fire_subst gl
             (mkProd (Name (name gl), case_ty, mkArrow refl (lift 2 concl))) in 
@@ -4773,7 +4773,7 @@ let pirrel_rewrite pred rdx rdx_ty new_r
   let proof = mkApp (elim, [| rdx_ty; new_rdx; pred; p; rdx; c |]) in
   (* We check the proof is well typed *)
   let sigma, proof_ty =
-    try Typing.e_type_of env sigma proof with _ -> raise PRtype_error in
+    try Typing.type_of env sigma proof with _ -> raise PRtype_error in
   pp(lazy(str"pirrel_rewrite proof term of type: " ++ pr_constr proof_ty));
   try refine_with 
     ~first_goes_last:(not !ssroldreworder) ~with_evars:false (sigma, proof) gl
@@ -4817,7 +4817,7 @@ let rwcltac cl rdx dir sr gl =
   let cvtac, rwtac, gl =
     if closed0 r' then 
       let env, sigma, c, c_eq = pf_env gl, fst sr, snd sr, build_coq_eq () in
-      let sigma, c_ty = Typing.e_type_of env sigma c in
+      let sigma, c_ty = Typing.type_of env sigma c in
         pp(lazy(str"c_ty@rwcltac=" ++ pr_constr c_ty));
       match kind_of_type (Reductionops.whd_betadeltaiota env sigma c_ty) with
       | AtomicType(e, a) when is_ind_ref e c_eq ->
@@ -4825,7 +4825,7 @@ let rwcltac cl rdx dir sr gl =
           pirrel_rewrite cl rdx rdxt new_rdx dir (sigma,c) c_ty, tclIDTAC, gl
       | _ -> 
           let cl' = mkApp (mkNamedLambda pattern_id rdxt cl, [|rdx|]) in
-          let sigma, _ = Typing.e_type_of env sigma cl' in
+          let sigma, _ = Typing.type_of env sigma cl' in
           let gl = pf_merge_uc_of sigma gl in
           Proofview.V82.of_tactic (convert_concl cl'), rewritetac dir r', gl
     else
@@ -5537,7 +5537,7 @@ let ssrsettac ist id ((_, (pat, pty)), (
     str"Did you mean pose?") else
   let c, cty =  match kind_of_term c with
   | Cast(t, DEFAULTcast, ty) -> t, ty
-  | _ -> c, pf_type_of gl c in
+  | _ -> c, pf_unsafe_type_of gl c in
   let cl' = mkLetIn (Name id, c, cty, cl) in
   let gl = pf_merge_uc ucst gl in
   tclTHEN (Proofview.V82.of_tactic (convert_concl cl')) (introid id) gl
@@ -5605,7 +5605,7 @@ let occur_existential_or_casted_meta c =
   in try occrec c; false with Not_found -> true
 
 let examine_abstract id gl =
-  let tid = pf_type_of gl id in
+  let tid = pf_unsafe_type_of gl id in
   let abstract, gl = pf_mkSsrConst "abstract" gl in
   if not (isApp tid) || not (Term.eq_constr (fst(destApp tid)) abstract) then
     errorstrm(strbrk"not an abstract constant: "++pr_constr id);
@@ -5641,7 +5641,7 @@ let unfold cl =
 let havegentac ist t gl =
   let sigma, c, ucst = pf_abs_ssrterm ist gl t in
   let gl = pf_merge_uc ucst gl in
-  apply_type (mkArrow (pf_type_of gl c) (pf_concl gl)) [c] gl
+  apply_type (mkArrow (pf_unsafe_type_of gl c) (pf_concl gl)) [c] gl
 
 let havetac ist
   (transp,((((clr, pats), binders), simpl), (((fk, _), t), hint)))
@@ -5696,7 +5696,7 @@ let havetac ist
      let cty = combineCG cty hole (mkCArrow loc) mkRArrow in
      let _, t, uc = interp gl false (combineCG ct cty (mkCCast loc) mkRCast) in
      let gl = pf_merge_uc uc gl in
-     let ty = pf_type_of gl t in
+     let ty = pf_unsafe_type_of gl t in
      let ctx, _ = decompose_prod_n 1 ty in
      let assert_is_conv gl =
        try Proofview.V82.of_tactic (convert_concl (compose_prod ctx concl)) gl
@@ -6065,7 +6065,7 @@ GEXTEND Gram
           let s = coerce_reference_to_id qid in
 	  Vernacexpr.VernacDefinition
 	    ((Some Decl_kinds.Global,Decl_kinds.CanonicalStructure),
-             (dummy_loc,s),(d  ))
+             ((dummy_loc, s),None),(d  ))
   ]];
 END
 
diff -Npur ssreflect-1.5.coq85beta2/src/ssrmatching.ml4 ssreflect-1.5.coq85beta3/src/ssrmatching.ml4
--- ssreflect-1.5.coq85beta2/src/ssrmatching.ml4	2015-04-20 13:39:29.000000000 +0200
+++ ssreflect-1.5.coq85beta3/src/ssrmatching.ml4	2015-12-02 16:17:41.987795317 +0100
@@ -1225,7 +1225,7 @@ let ssrpatterntac ist arg gl =
   let concl0 = pf_concl gl in
   let (t, uc), concl_x =
     fill_occ_pattern (Global.env()) sigma0 concl0 pat noindex 1 in
-  let tty = pf_type_of gl t in
+  let tty = pf_unsafe_type_of gl t in
   let concl = mkLetIn (Name (id_of_string "toto"), t, tty, concl_x) in
   Proofview.V82.of_tactic (convert_concl concl DEFAULTcast) gl
 
